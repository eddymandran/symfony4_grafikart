security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # charger les utilisateurs depuis la memoire ( un fichier)
        # users:
        #   memory:
        #      users:
        #         demo: { password: 'demo', roles: ['ROLE_ADMIN'] }

        from_database:
            entity:
                class: App\Entity\User
                property: username


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            # http_basic: true //fenetre de connexion simple

            form_login: 
                check_path: login

            logout:
                path: /logout
                target: /
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    encoders:
        # this internal class is used by Symfony to represent in-memory users
        # Symfony\Component\Security\Core\User\User: 'plaintext'

        App\Entity\User:
            algorithm: bcrypt
            cost: 12